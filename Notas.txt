1- git status -s
    Los archivos que tenemos hasta el momento en el proyecto (haciéndoles seguimiento)

2- git log --oneline
    Ver las distintos commits que hemos hecho (versiones)

NOTA: Cuando hacemos un commit sin mensaje nos puede salir una ventana medio extraña. Para salir de ahí:
Escribir ":q!" pra salir de esa ventana

3- git config --global user.name "mi nombre"
   git config --global user.email "myemail@example.com"

Registrando de manera local nuestra cuenta de gitHub donde tendremos nuestro repositorio
(Colocar el correo asociado a gitHub)

4- git remote add origin https://github.com/gazoo80/prueba-git.git

Vinculamos nuestro repositorio local con uno remoto

5- git branch -M master

Rama en la que se va a subir nuestro código

6- git push -u origin master

Enviamos nuestro código a la rama master en el origin (es decir en el repositorio remoto vinculado)
Es probable que nos aparezca una pequeña ventana para ingresra nuestras credenciales de gitHub para poder
acceder al repositorio remoto desde nuestra máquina

NOTA: Usando GitHub Pages. En GitHub vamos a Settings / Pages / Seleccionamos el branch donde está
nuestro código / Save.
Aparecerá la dirección dond está nuestra página (Sólo material estático)

7- git clone https://github.com/gazoo80/prueba-git.git

Clonamos un proyecto desde el repositorio en GitHub. Con esto resuperamos incluso la información de
nuestros commits a diferencia de descargarlo como ZIP

8- Para ignorar archivos (no se les hara seguimiento) y no se subirán al repositorio. Crear el
   archivo .gitignore y colocar ahí el nombre de los archivos y carpetas a ignorar

9- git log --oneline
   Ejm: c4c8adb gitHub Pages
   git checkout c4c8adb

Solo para revisar lo que habia en un commit especifico (NO para hacer cambios)
Copiamos el código del commit obtenido com git log --oneline
y lo utilizamos con checkout
La cantidad de archivos y su contenido regresa a como estaban hasta el commit "c4c8adb"

Para regresar al ultimo commit (el más reciente) de la rama:
git checkout {id de ese commit} o {el nombre de la rama}
git checkout f01352d
El proyecto regresó a su versión más actual

10- git branch -m master main

Renombramos la rama master a main pero solo para el repositorio actual

11- git config --global init.defaultBranch main

Para cambiar el nombre de master a main de manera global. Otros repositorios que creemos
ya vendran con la rama main en lugar de master

12- git reset c4c8adb

Regresar a un commit específico, eliminando los commits siguientes a partir de ahí y dejarle de
dar seguimiento a archivos involucrados en esos commits eliminados (estos archivos NO desaparecen)

13- git reset --hard c4c8adb
Regresar a un commit específico, eliminando los commits siguientes a partir de ahí y además,
se eliminan los archivos que no existían hasta el commit al que se regresó (c4c8adb)

14- git reflog

Obtenemos un historial de todos nuestros commits, incluso los que se supone se eliminaron
con reset --hard. Podemos utlizar el código respectivo para regresar al commit más reciente
con git reset --hard {commit más actual}

15- git revert 4cb71e3

Eliminamos un commit especifico pero se genera otro con una nueva informacion

16- git branch

Para saber en que rama estoy

17- git branch 01-rama

Creamos la rama 01-rama

18- git checkout 01-rama

Viajamos a la rma creada

19- git log --oneline --graph

Mas detalle de nuestras ramas

NOTA: Si agregamos un nuevo archivo (contacto.html) y hacemos git log --oneline --graph
deberia aparecernos algo así:
* ecebf0d (HEAD -> 01-rama) contacto listo
* 619950a (origin/main, main) segundo commit
* a5ab7cf primer commit
Que indica que la rama main quedó hasta con el segundo commit
Mientras que la rama 91-rama tiene además el archivo contact.html commit "contact listo"

20- git push --set-upstream origin 01-rama

Subimos el código a la rama 01-rama en el origen (repositorio remoto)
Recordemos que ya no estamos en la rama main sino en la rama 01-rama